--------------------------------------------------------
-- Criação das dimensões
--------------------------------------------------------
CREATE TABLE dim_cliente (
    chave_cliente    NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_cliente      NUMBER(10) NOT NULL,
    nom_cliente      VARCHAR2(50),
    des_razao_social VARCHAR2(80),
    tip_pessoa       CHAR(1),
    num_cpf_cnpj     NUMBER(15),
    dat_cadastro     DATE,
    dat_cancelamento DATE,
    sta_ativo        CHAR(1)
);

CREATE TABLE dim_produto (
    chave_produto    NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_produto      NUMBER(10) NOT NULL,
    nom_produto      VARCHAR2(20),
    cod_barra        VARCHAR2(20),
    sta_ativo        VARCHAR2(20),
    dat_cadastro     DATE,
    dat_cancelamento DATE
);

CREATE TABLE dim_vendedor (
    chave_vendedor NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_vendedor   NUMBER(4) NOT NULL,
    nom_vendedor   VARCHAR2(50),
    sta_ativo      CHAR(1)
);

CREATE TABLE dim_estoque (
    chave_estoque NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_estoque   NUMBER(4) NOT NULL,
    nom_estoque   VARCHAR2(50)
);

CREATE TABLE dim_historico_pedido (
    chave_historico  NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_pedido       NUMBER(10) NOT NULL,
    cod_cliente      NUMBER(10),
    dat_pedido       DATE,
    dat_cancelamento DATE,
    dat_entrega      DATE,
    val_total_pedido NUMBER(12, 2),
    val_desconto     NUMBER(12, 2),
    cod_vendedor     NUMBER(4)
);

CREATE TABLE dim_endereco_cliente (
    chave_endereco NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_cliente    NUMBER(10),
    des_endereco   VARCHAR2(80),
    num_cep        NUMBER(9),
    des_bairro     VARCHAR2(50),
    cod_cidade     NUMBER(6)
);

CREATE TABLE dim_cidade (
    chave_cidade NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_cidade   NUMBER(6) NOT NULL,
    nom_cidade   VARCHAR2(50),
    cod_estado   CHAR(3)
);

CREATE TABLE dim_estado (
    chave_estado NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_estado   CHAR(3) NOT NULL,
    nom_estado   VARCHAR2(50),
    cod_pais     NUMBER(3)
);

CREATE TABLE dim_pais (
    chave_pais NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    cod_pais   NUMBER(3) NOT NULL,
    nom_pais   VARCHAR2(50)
);


--------------------------------------------------------
-- Criação do fato
--------------------------------------------------------
CREATE TABLE fato_pedido (
    chave_pedido    NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    chave_cliente   NUMBER NOT NULL,
    chave_produto   NUMBER NOT NULL,
    chave_vendedor  NUMBER NOT NULL,
    chave_estoque   NUMBER,
    chave_endereco  NUMBER,
    chave_cidade    NUMBER,
    chave_estado    NUMBER,
    chave_pais      NUMBER,
    chave_historico NUMBER,
    qtd_item        NUMBER(10, 2) NOT NULL,
    valor_uni       NUMBER(10, 2) NOT NULL,
    valor_total     NUMBER(12, 2) NOT NULL,
    data_pedido     DATE NOT NULL,
    sta_pedido      CHAR(1),
    CONSTRAINT fk_pedido_cliente FOREIGN KEY ( chave_cliente )
        REFERENCES dim_cliente ( chave_cliente ),
    CONSTRAINT fk_pedido_produto FOREIGN KEY ( chave_produto )
        REFERENCES dim_produto ( chave_produto ),
    CONSTRAINT fk_pedido_vendedor FOREIGN KEY ( chave_vendedor )
        REFERENCES dim_vendedor ( chave_vendedor ),
    CONSTRAINT fk_pedido_estoque FOREIGN KEY ( chave_estoque )
        REFERENCES dim_estoque ( chave_estoque ),
    CONSTRAINT fk_pedido_endereco FOREIGN KEY ( chave_endereco )
        REFERENCES dim_endereco_cliente ( chave_endereco ),
    CONSTRAINT fk_pedido_cidade FOREIGN KEY ( chave_cidade )
        REFERENCES dim_cidade ( chave_cidade ),
    CONSTRAINT fk_pedido_estado FOREIGN KEY ( chave_estado )
        REFERENCES dim_estado ( chave_estado ),
    CONSTRAINT fk_pedido_pais FOREIGN KEY ( chave_pais )
        REFERENCES dim_pais ( chave_pais ),
    CONSTRAINT fk_pedido_historico FOREIGN KEY ( chave_historico )
        REFERENCES dim_historico_pedido ( chave_historico )
);


--------------------------------------------------------
-- Criação da auditoria
--------------------------------------------------------
CREATE TABLE auditoria_dimensoes (
    id_auditoria   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabela_nome    VARCHAR2(50),
    operacao       VARCHAR2(10),
    usuario_banco  VARCHAR2(30),
    data_operacao  DATE,
    chave_registro VARCHAR2(50)
);

CREATE TABLE aud_fato_pedido (
    id_auditoria    NUMBER
        GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
    operacao        VARCHAR2(10),
    usuario_bd      VARCHAR2(50),
    data_operacao   DATE,
    chave_pedido    NUMBER,
    chave_cliente   NUMBER,
    chave_produto   NUMBER,
    chave_vendedor  NUMBER,
    chave_estoque   NUMBER,
    chave_endereco  NUMBER,
    chave_cidade    NUMBER,
    chave_estado    NUMBER,
    chave_pais      NUMBER,
    chave_historico NUMBER,
    qtd_item        NUMBER(10, 2),
    valor_uni       NUMBER(10, 2),
    valor_total     NUMBER(12, 2),
    data_pedido     DATE,
    sta_pedido      CHAR(1)
);


--------------------------------------------------------
-- Triggers de auditoria
--------------------------------------------------------
CREATE OR REPLACE TRIGGER trg_audit_dim_cliente
AFTER INSERT ON dim_cliente
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_CLIENTE', 'INSERT', USER, SYSDATE, :NEW.chave_cliente);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_produto
AFTER INSERT ON dim_produto
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_PRODUTO', 'INSERT', USER, SYSDATE, :NEW.chave_produto);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_vendedor
AFTER INSERT ON dim_vendedor
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_VENDEDOR', 'INSERT', USER, SYSDATE, :NEW.chave_vendedor);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_estoque
AFTER INSERT ON dim_estoque
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_ESTOQUE', 'INSERT', USER, SYSDATE, :NEW.chave_estoque);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_endereco_cliente
AFTER INSERT ON dim_endereco_cliente
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_ENDERECO_CLIENTE', 'INSERT', USER, SYSDATE, :NEW.chave_endereco);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_cidade
AFTER INSERT ON dim_cidade
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_CIDADE', 'INSERT', USER, SYSDATE, :NEW.chave_cidade);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_estado
AFTER INSERT ON dim_estado
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_ESTADO', 'INSERT', USER, SYSDATE, :NEW.chave_estado);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_pais
AFTER INSERT ON dim_pais
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_PAIS', 'INSERT', USER, SYSDATE, :NEW.chave_pais);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_dim_historico_pedido
AFTER INSERT ON dim_historico_pedido
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_dimensoes
        (tabela_nome, operacao, usuario_banco, data_operacao, chave_registro)
    VALUES
        ('DIM_HISTORICO_PEDIDO', 'INSERT', USER, SYSDATE, :NEW.chave_historico);
END;
/

CREATE OR REPLACE TRIGGER trg_aud_fato_pedido
AFTER INSERT ON fato_pedido
FOR EACH ROW
BEGIN
    INSERT INTO aud_fato_pedido (
        operacao,
        usuario_bd,
        data_operacao,
        chave_pedido,
        chave_cliente,
        chave_produto,
        chave_vendedor,
        chave_estoque,
        chave_endereco,
        chave_cidade,
        chave_estado,
        chave_pais,
        chave_historico,
        qtd_item,
        valor_uni,
        valor_total,
        data_pedido,
        sta_pedido
    ) VALUES (
        'INSERT',
        USER,
        SYSDATE,
        :NEW.chave_pedido,
        :NEW.chave_cliente,
        :NEW.chave_produto,
        :NEW.chave_vendedor,
        :NEW.chave_estoque,
        :NEW.chave_endereco,
        :NEW.chave_cidade,
        :NEW.chave_estado,
        :NEW.chave_pais,
        :NEW.chave_historico,
        :NEW.qtd_item,
        :NEW.valor_uni,
        :NEW.valor_total,
        :NEW.data_pedido,
        :NEW.sta_pedido
    );
END;
/


--------------------------------------------------------
-- Triggers de tratamento de dados nas dimensões
--------------------------------------------------------
-- Cliente
CREATE OR REPLACE TRIGGER trg_dim_cliente_bi
BEFORE INSERT ON dim_cliente
FOR EACH ROW
BEGIN
    IF :NEW.cod_cliente IS NULL THEN
        RAISE_APPLICATION_ERROR(-20010, 'cod_cliente nao pode ser nulo.');
    END IF;
    IF :NEW.nom_cliente IS NULL THEN
        :NEW.nom_cliente := 'NAO INFORMADO';
    END IF;
    IF :NEW.sta_ativo IS NULL THEN
        :NEW.sta_ativo := 'A';
    END IF;
END;
/
-- Produto
CREATE OR REPLACE TRIGGER trg_dim_produto_bi
BEFORE INSERT ON dim_produto
FOR EACH ROW
BEGIN
    IF :NEW.cod_produto IS NULL THEN
        RAISE_APPLICATION_ERROR(-20011, 'cod_produto nao pode ser nulo.');
    END IF;
    IF :NEW.nom_produto IS NULL THEN
        :NEW.nom_produto := 'NAO INFORMADO';
    END IF;
    IF :NEW.sta_ativo IS NULL THEN
        :NEW.sta_ativo := 'A';
    END IF;
END;
/
-- Vendedor
CREATE OR REPLACE TRIGGER trg_dim_vendedor_bi
BEFORE INSERT ON dim_vendedor
FOR EACH ROW
BEGIN
    IF :NEW.cod_vendedor IS NULL THEN
        RAISE_APPLICATION_ERROR(-20012, 'cod_vendedor nao pode ser nulo.');
    END IF;
    IF :NEW.nom_vendedor IS NULL THEN
        :NEW.nom_vendedor := 'NAO INFORMADO';
    END IF;
    IF :NEW.sta_ativo IS NULL THEN
        :NEW.sta_ativo := 'A';
    END IF;
END;
/
-- Estoque
CREATE OR REPLACE TRIGGER trg_dim_estoque_bi
BEFORE INSERT ON dim_estoque
FOR EACH ROW
BEGIN
    IF :NEW.cod_estoque IS NULL THEN
        RAISE_APPLICATION_ERROR(-20013, 'cod_estoque nao pode ser nulo.');
    END IF;
    IF :NEW.nom_estoque IS NULL THEN
        :NEW.nom_estoque := 'NAO INFORMADO';
    END IF;
END;
/
-- Endereco Cliente
CREATE OR REPLACE TRIGGER trg_dim_endereco_cliente_bi
BEFORE INSERT ON dim_endereco_cliente
FOR EACH ROW
BEGIN
    IF :NEW.cod_cliente IS NULL THEN
        RAISE_APPLICATION_ERROR(-20014, 'cod_cliente do endereco nao pode ser nulo.');
    END IF;
    IF :NEW.des_endereco IS NULL THEN
        :NEW.des_endereco := 'NAO INFORMADO';
    END IF;
    IF :NEW.num_cep IS NULL THEN
        :NEW.num_cep := 0;
    END IF;
    IF :NEW.des_bairro IS NULL THEN
        :NEW.des_bairro := 'NAO INFORMADO';
    END IF;
END;
/
-- Cidade
CREATE OR REPLACE TRIGGER trg_dim_cidade_bi
BEFORE INSERT ON dim_cidade
FOR EACH ROW
BEGIN
    IF :NEW.cod_cidade IS NULL THEN
        RAISE_APPLICATION_ERROR(-20015, 'cod_cidade nao pode ser nulo.');
    END IF;
    IF :NEW.nom_cidade IS NULL THEN
        :NEW.nom_cidade := 'NAO INFORMADO';
    END IF;
    IF :NEW.cod_estado IS NULL THEN
        :NEW.cod_estado := 'XX';
    END IF;
END;
/
-- Estado
CREATE OR REPLACE TRIGGER trg_dim_estado_bi
BEFORE INSERT ON dim_estado
FOR EACH ROW
BEGIN
    IF :NEW.cod_estado IS NULL THEN
        RAISE_APPLICATION_ERROR(-20016, 'cod_estado nao pode ser nulo.');
    END IF;
    IF :NEW.nom_estado IS NULL THEN
        :NEW.nom_estado := 'NAO INFORMADO';
    END IF;
    IF :NEW.cod_pais IS NULL THEN
        :NEW.cod_pais := 0;
    END IF;
END;
/
-- Pais
CREATE OR REPLACE TRIGGER trg_dim_pais_bi
BEFORE INSERT ON dim_pais
FOR EACH ROW
BEGIN
    IF :NEW.cod_pais IS NULL THEN
        RAISE_APPLICATION_ERROR(-20017, 'cod_pais nao pode ser nulo.');
    END IF;
    IF :NEW.nom_pais IS NULL THEN
        :NEW.nom_pais := 'NAO INFORMADO';
    END IF;
END;
/
-- Historico Pedido
CREATE OR REPLACE TRIGGER trg_dim_historico_pedido_bi
BEFORE INSERT ON dim_historico_pedido
FOR EACH ROW
BEGIN
    IF :NEW.cod_pedido IS NULL THEN
        RAISE_APPLICATION_ERROR(-20018, 'cod_pedido nao pode ser nulo.');
    END IF;
    IF :NEW.cod_cliente IS NULL THEN
        RAISE_APPLICATION_ERROR(-20019, 'cod_cliente no historico nao pode ser nulo.');
    END IF;
    IF :NEW.dat_pedido IS NULL THEN
        :NEW.dat_pedido := SYSDATE;
    END IF;
    IF :NEW.val_total_pedido IS NULL THEN
        :NEW.val_total_pedido := 0;
    END IF;
    IF :NEW.val_desconto IS NULL THEN
        :NEW.val_desconto := 0;
    END IF;
END;
/


--------------------------------------------------------
-- Carregamento de dados
--------------------------------------------------------
INSERT INTO dim_cliente (
    cod_cliente,
    nom_cliente,
    des_razao_social,
    tip_pessoa,
    num_cpf_cnpj,
    dat_cadastro,
    dat_cancelamento,
    sta_ativo
)
    SELECT
        cod_cliente,
        nom_cliente,
        des_razao_social,
        tip_pessoa,
        num_cpf_cnpj,
        dat_cadastro,
        dat_cancelamento,
        sta_ativo
    FROM
        cliente;

INSERT INTO dim_produto (
    cod_produto,
    nom_produto,
    cod_barra,
    sta_ativo,
    dat_cadastro,
    dat_cancelamento
)
    SELECT
        cod_produto,
        nom_produto,
        cod_barra,
        sta_ativo,
        dat_cadastro,
        dat_cancelamento
    FROM
        produto;

INSERT INTO dim_vendedor (
    cod_vendedor,
    nom_vendedor,
    sta_ativo
)
    SELECT
        cod_vendedor,
        nom_vendedor,
        sta_ativo
    FROM
        vendedor;

INSERT INTO dim_estoque (
    cod_estoque,
    nom_estoque
)
    SELECT
        cod_estoque,
        nom_estoque
    FROM
        estoque;

INSERT INTO dim_historico_pedido (
    cod_pedido,
    cod_cliente,
    dat_pedido,
    dat_cancelamento,
    dat_entrega,
    val_total_pedido,
    val_desconto,
    cod_vendedor
)
    SELECT
        cod_pedido,
        cod_cliente,
        dat_pedido,
        dat_cancelamento,
        dat_entrega,
        val_total_pedido,
        val_desconto,
        cod_vendedor
    FROM
        historico_pedido;

INSERT INTO dim_endereco_cliente (
    cod_cliente,
    des_endereco,
    num_cep,
    des_bairro,
    cod_cidade
)
    SELECT
        cod_cliente,
        des_endereco,
        num_cep,
        des_bairro,
        cod_cidade
    FROM
        endereco_cliente;

INSERT INTO dim_cidade (
    cod_cidade,
    nom_cidade,
    cod_estado
)
    SELECT
        cod_cidade,
        nom_cidade,
        cod_estado
    FROM
        cidade;

INSERT INTO dim_estado (
    cod_estado,
    nom_estado,
    cod_pais
)
    SELECT
        cod_estado,
        nom_estado,
        cod_pais
    FROM
        estado;

INSERT INTO dim_pais (
    cod_pais,
    nom_pais
)
    SELECT
        cod_pais,
        nom_pais
    FROM
        pais;


--------------------------------------------------------
-- Packages de dimensões
--------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_dimensoes AS
    PROCEDURE inserir_cliente(
        p_cod_cliente NUMBER,
        p_nom_cliente VARCHAR2,
        p_des_razao_social VARCHAR2,
        p_tip_pessoa CHAR,
        p_num_cpf_cnpj NUMBER,
        p_dat_cadastro DATE,
        p_dat_cancelamento DATE,
        p_sta_ativo CHAR
    );

    PROCEDURE inserir_produto(
        p_cod_produto NUMBER,
        p_nom_produto VARCHAR2,
        p_cod_barra VARCHAR2,
        p_sta_ativo VARCHAR2,
        p_dat_cadastro DATE,
        p_dat_cancelamento DATE
    );

    PROCEDURE inserir_vendedor(
        p_cod_vendedor NUMBER,
        p_nom_vendedor VARCHAR2,
        p_sta_ativo CHAR
    );

    PROCEDURE inserir_estoque(
        p_cod_estoque NUMBER,
        p_nom_estoque VARCHAR2
    );

    PROCEDURE inserir_endereco_cliente(
        p_cod_cliente NUMBER,
        p_des_endereco VARCHAR2,
        p_num_cep NUMBER,
        p_des_bairro VARCHAR2,
        p_cod_cidade NUMBER
    );

    PROCEDURE inserir_cidade(
        p_cod_cidade NUMBER,
        p_nom_cidade VARCHAR2,
        p_cod_estado CHAR
    );

    PROCEDURE inserir_estado(
        p_cod_estado CHAR,
        p_nom_estado VARCHAR2,
        p_cod_pais NUMBER
    );

    PROCEDURE inserir_pais(
        p_cod_pais NUMBER,
        p_nom_pais VARCHAR2
    );

    PROCEDURE inserir_historico_pedido(
        p_cod_pedido NUMBER,
        p_cod_cliente NUMBER,
        p_dat_pedido DATE,
        p_dat_cancelamento DATE,
        p_dat_entrega DATE,
        p_val_total_pedido NUMBER,
        p_val_desconto NUMBER,
        p_cod_vendedor NUMBER
    );
END pkg_dimensoes;
/

CREATE OR REPLACE PACKAGE BODY pkg_dimensoes AS
-- Inserir Cliente
PROCEDURE inserir_cliente(
    p_cod_cliente NUMBER,
    p_nom_cliente VARCHAR2,
    p_des_razao_social VARCHAR2,
    p_tip_pessoa CHAR,
    p_num_cpf_cnpj NUMBER,
    p_dat_cadastro DATE,
    p_dat_cancelamento DATE,
    p_sta_ativo CHAR
) IS
BEGIN
    IF p_cod_cliente IS NULL OR p_nom_cliente IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001,'Campos obrigatórios do cliente ausentes!');
    END IF;

    INSERT INTO dim_cliente(
        cod_cliente, nom_cliente, des_razao_social, tip_pessoa,
        num_cpf_cnpj, dat_cadastro, dat_cancelamento, sta_ativo
    )
    VALUES (
        p_cod_cliente, p_nom_cliente, p_des_razao_social, p_tip_pessoa,
        p_num_cpf_cnpj, p_dat_cadastro, p_dat_cancelamento, p_sta_ativo
    );
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_cliente: '||SQLERRM);
END;

-- Inserir Produto
PROCEDURE inserir_produto(
    p_cod_produto NUMBER,
    p_nom_produto VARCHAR2,
    p_cod_barra VARCHAR2,
    p_sta_ativo VARCHAR2,
    p_dat_cadastro DATE,
    p_dat_cancelamento DATE
) IS
BEGIN
    IF p_cod_produto IS NULL OR p_nom_produto IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002,'Campos obrigatórios do produto ausentes!');
    END IF;

    INSERT INTO dim_produto(
        cod_produto, nom_produto, cod_barra, sta_ativo, dat_cadastro, dat_cancelamento
    )
    VALUES (
        p_cod_produto, p_nom_produto, p_cod_barra, p_sta_ativo, p_dat_cadastro, p_dat_cancelamento
    );
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_produto: '||SQLERRM);
END;

-- Inserir Vendedor
PROCEDURE inserir_vendedor(
    p_cod_vendedor NUMBER,
    p_nom_vendedor VARCHAR2,
    p_sta_ativo CHAR
) IS
BEGIN
    IF p_cod_vendedor IS NULL OR p_nom_vendedor IS NULL THEN
        RAISE_APPLICATION_ERROR(-20003,'Campos obrigatórios do vendedor ausentes!');
    END IF;

    INSERT INTO dim_vendedor(
        cod_vendedor, nom_vendedor, sta_ativo
    )
    VALUES (
        p_cod_vendedor, p_nom_vendedor, p_sta_ativo
    );
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_vendedor: '||SQLERRM);
END;

-- Inserir Estoque
PROCEDURE inserir_estoque(
    p_cod_estoque NUMBER,
    p_nom_estoque VARCHAR2
) IS
BEGIN
    IF p_cod_estoque IS NULL OR p_nom_estoque IS NULL THEN
        RAISE_APPLICATION_ERROR(-20004,'Campos obrigatórios do estoque ausentes!');
    END IF;

    INSERT INTO dim_estoque(cod_estoque, nom_estoque)
    VALUES (p_cod_estoque, p_nom_estoque);
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_estoque: '||SQLERRM);
END;

-- Inserir Endereco Cliente
PROCEDURE inserir_endereco_cliente(
    p_cod_cliente NUMBER,
    p_des_endereco VARCHAR2,
    p_num_cep NUMBER,
    p_des_bairro VARCHAR2,
    p_cod_cidade NUMBER
) IS
BEGIN
    IF p_cod_cliente IS NULL OR p_des_endereco IS NULL THEN
        RAISE_APPLICATION_ERROR(-20005,'Campos obrigatórios do endereco ausentes!');
    END IF;

    INSERT INTO dim_endereco_cliente(
        cod_cliente, des_endereco, num_cep, des_bairro, cod_cidade
    )
    VALUES (
        p_cod_cliente, p_des_endereco, p_num_cep, p_des_bairro, p_cod_cidade
    );
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_endereco_cliente: '||SQLERRM);
END;

-- Inserir Cidade
PROCEDURE inserir_cidade(
    p_cod_cidade NUMBER,
    p_nom_cidade VARCHAR2,
    p_cod_estado CHAR
) IS
BEGIN
    IF p_cod_cidade IS NULL OR p_nom_cidade IS NULL THEN
        RAISE_APPLICATION_ERROR(-20006,'Campos obrigatórios da cidade ausentes!');
    END IF;

    INSERT INTO dim_cidade(cod_cidade, nom_cidade, cod_estado)
    VALUES (p_cod_cidade, p_nom_cidade, p_cod_estado);
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_cidade: '||SQLERRM);
END;

-- Inserir Estado
PROCEDURE inserir_estado(
    p_cod_estado CHAR,
    p_nom_estado VARCHAR2,
    p_cod_pais NUMBER
) IS
BEGIN
    IF p_cod_estado IS NULL OR p_nom_estado IS NULL THEN
        RAISE_APPLICATION_ERROR(-20007,'Campos obrigatórios do estado ausentes!');
    END IF;

    INSERT INTO dim_estado(cod_estado, nom_estado, cod_pais)
    VALUES (p_cod_estado, p_nom_estado, p_cod_pais);
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_estado: '||SQLERRM);
END;

-- Inserir Pais
PROCEDURE inserir_pais(
    p_cod_pais NUMBER,
    p_nom_pais VARCHAR2
) IS
BEGIN
    IF p_cod_pais IS NULL OR p_nom_pais IS NULL THEN
        RAISE_APPLICATION_ERROR(-20008,'Campos obrigatórios do pais ausentes!');
    END IF;

    INSERT INTO dim_pais(cod_pais, nom_pais)
    VALUES (p_cod_pais, p_nom_pais);
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_pais: '||SQLERRM);
END;

-- Inserir Historico Pedido
PROCEDURE inserir_historico_pedido(
    p_cod_pedido NUMBER,
    p_cod_cliente NUMBER,
    p_dat_pedido DATE,
    p_dat_cancelamento DATE,
    p_dat_entrega DATE,
    p_val_total_pedido NUMBER,
    p_val_desconto NUMBER,
    p_cod_vendedor NUMBER
) IS
BEGIN
    IF p_cod_pedido IS NULL OR p_cod_cliente IS NULL OR p_dat_pedido IS NULL THEN
        RAISE_APPLICATION_ERROR(-20009,'Campos obrigatórios do historico de pedido ausentes!');
    END IF;

    INSERT INTO dim_historico_pedido(
        cod_pedido, cod_cliente, dat_pedido, dat_cancelamento, dat_entrega,
        val_total_pedido, val_desconto, cod_vendedor
    ) VALUES (
        p_cod_pedido, p_cod_cliente, p_dat_pedido, p_dat_cancelamento, p_dat_entrega,
        p_val_total_pedido, p_val_desconto, p_cod_vendedor
    );
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Erro inserir_historico_pedido: '||SQLERRM);
END;

END pkg_dimensoes;
/


--------------------------------------------------------
-- Packages de fato
--------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_fato AS
    PROCEDURE inserir_fato_pedido (
        p_chave_cliente   NUMBER,
        p_chave_produto   NUMBER,
        p_chave_vendedor  NUMBER,
        p_chave_estoque   NUMBER,
        p_chave_endereco  NUMBER,
        p_chave_cidade    NUMBER,
        p_chave_estado    NUMBER,
        p_chave_pais      NUMBER,
        p_chave_historico NUMBER,
        p_qtd_item        NUMBER,
        p_valor_uni       NUMBER,
        p_data_pedido     DATE,
        p_sta_pedido      CHAR
    );

END pkg_fato;
/

CREATE OR REPLACE PACKAGE BODY pkg_fato AS

    PROCEDURE inserir_fato_pedido (
        p_chave_cliente   NUMBER,
        p_chave_produto   NUMBER,
        p_chave_vendedor  NUMBER,
        p_chave_estoque   NUMBER,
        p_chave_endereco  NUMBER,
        p_chave_cidade    NUMBER,
        p_chave_estado    NUMBER,
        p_chave_pais      NUMBER,
        p_chave_historico NUMBER,
        p_qtd_item        NUMBER,
        p_valor_uni       NUMBER,
        p_data_pedido     DATE,
        p_sta_pedido      CHAR
    ) IS
        v_valor_total NUMBER(12, 2);
    BEGIN
        IF p_chave_cliente IS NULL
           OR p_chave_produto IS NULL
        OR p_qtd_item IS NULL
        OR p_valor_uni IS NULL THEN
            raise_application_error(-20001, 'Campos obrigatórios ausentes!');
        END IF;

    -- Calcula o valor total automaticamente
        v_valor_total := p_qtd_item * p_valor_uni;
        
        INSERT INTO fato_pedido (
            chave_cliente,
            chave_produto,
            chave_vendedor,
            chave_estoque,
            chave_endereco,
            chave_cidade,
            chave_estado,
            chave_pais,
            chave_historico,
            qtd_item,
            valor_uni,
            valor_total,
            data_pedido,
            sta_pedido
        ) VALUES ( p_chave_cliente,
                   p_chave_produto,
                   p_chave_vendedor,
                   p_chave_estoque,
                   p_chave_endereco,
                   p_chave_cidade,
                   p_chave_estado,
                   p_chave_pais,
                   p_chave_historico,
                   p_qtd_item,
                   p_valor_uni,
                   v_valor_total,
                   p_data_pedido,
                   p_sta_pedido );

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            dbms_output.put_line('Erro inserir_fato_pedido: ' || sqlerrm);
    END;

END pkg_fato;
/


--------------------------------------------------------
-- Teste de inserção
--------------------------------------------------------
BEGIN
    -- Inserir País
    pkg_dimensoes.inserir_pais(1, 'Brasil');

    -- Inserir Estado
    pkg_dimensoes.inserir_estado('SP', 'Sao Paulo', 1);

    -- Inserir Cidade
    pkg_dimensoes.inserir_cidade(1001, 'Sao Paulo', 'SP');

    -- Inserir Cliente
    pkg_dimensoes.inserir_cliente(
        101, 'Joao Silva', 'Joao Silva LTDA', 'J', 12345678901,
        SYSDATE, NULL, 'A'
    );

    -- Inserir Endereço do Cliente
    pkg_dimensoes.inserir_endereco_cliente(
        101, 'Rua das Flores, 123', 12345678, 'Centro', 1001
    );

    -- Inserir Produto
    pkg_dimensoes.inserir_produto(
        201, 'Notebook', '1234567890123', 'A', SYSDATE, NULL
    );

    -- Inserir Vendedor
    pkg_dimensoes.inserir_vendedor(301, 'Carlos Souza', 'A');

    -- Inserir Estoque
    pkg_dimensoes.inserir_estoque(401, 'Estoque Central');

    -- Inserir Histórico de Pedido
    pkg_dimensoes.inserir_historico_pedido(
        501, 101, SYSDATE, NULL, SYSDATE + 3, 7000, 0, 301
    );

    -- Inserir Fato de Pedido
    pkg_fato.inserir_fato_pedido(
        1,    -- chave_cliente
        1,    -- chave_produto
        1,    -- chave_vendedor
        1,    -- chave_estoque
        1,    -- chave_endereco
        1,    -- chave_cidade
        1,    -- chave_estado
        1,    -- chave_pais
        1,    -- chave_historico
        2,    -- qtd_item
        3500, -- valor_uni
        SYSDATE, -- data_pedido
        'S'   -- sta_pedido
    );

    COMMIT;
END;
/